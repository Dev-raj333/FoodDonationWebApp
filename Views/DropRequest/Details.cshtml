@model FoodDonationWebApp.Models.DropRequest
@{
    ViewData["Title"] = "Pickup Details";
}

<h2>Pickup Details</h2>

<div>
    <h4>Donation</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">Donor Name</dt>
        <dd class="col-sm-10">@Model.AllocatedFood.Recipient?.FirstName @Model.AllocatedFood.Recipient?.LastName</dd>

        <dt class="col-sm-2">Address</dt>
        <dd class="col-sm-10">@Model.AllocatedFood.Recipient?.Address</dd>

        <dt class="col-sm-2">Street Name</dt>
        <dd class="col-sm-10">@Model.AllocatedFood.Recipient?.StreetName</dd>

        <dt class="col-sm-2">Food Type</dt>
        <dd class="col-sm-10">@Model.AllocatedFood.RequestedFoodType</dd>

        <dt class="col-sm-2">Quantity</dt>
        <dd class="col-sm-10">@Model.AllocatedFood.Quantity</dd>

        <dt class="col-sm-2">Expiration Date</dt>
        <dd class="col-sm-10">@Model.AllocatedFood.DonatedDate.ToString("d")</dd>

        <dt class="col-sm-2">Status</dt>
        <dd class="col-sm-10">@Model.PickupStatus</dd>
    </dl>
</div>

<div>
    <a asp-action="Index" class="btn btn-primary">Back to List</a>
    <button id="showMapButton" class="btn btn-secondary" data-donor-id="@Model.AllocatedFood.Recipient?.Id">View Map</button>
</div>

<!-- Modal -->
<div class="modal fade" id="mapModal" tabindex="-1" aria-labelledby="mapModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="mapModalLabel">Recipiant Location</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="loadingSpinner" style="display: none; text-align: center;">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
                <div id="map" style="height: 400px; width: 100%;"></div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <partial name="_ValidationScriptsPartial.cshtml" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

    <script>
        let map;
        let donorMarker;
        let userMarker;
        let shortestPathPolyline;

        document.addEventListener('click', function (event) {
            if (event.target && event.target.id === 'showMapButton') {
                const donorId = event.target.getAttribute('data-donor-id');
                const loadingSpinner = document.getElementById('loadingSpinner');
                const modalElement = document.getElementById('mapModal');
                const mapElement = document.getElementById('map');

                if (donorId) {
                    loadingSpinner.style.display = 'block';

                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(
                            function (position) {
                                const userLatitude = position.coords.latitude;
                                const userLongitude = position.coords.longitude;

                                fetch(`/DropRequest/GetRecipiantLocation?donorId=${donorId}`)
                                    .then(response => {
                                        if (!response.ok) throw new Error('Failed to fetch donor location.');
                                        return response.json();
                                    })
                                    .then(data => {
                                        if (data.success) {
                                            const donorLatitude = data.latitude;
                                            const donorLongitude = data.longitude;

                                            const modal = new bootstrap.Modal(modalElement, { backdrop: false });
                                            modal.show();

                                            setTimeout(() => {
                                                loadingSpinner.style.display = 'none';

                                                if (!map) {
                                                    map = L.map(mapElement, {
                                                        center: [userLatitude, userLongitude],
                                                        zoom: 13,
                                                        maxZoom: 19,
                                                        minZoom: 12
                                                    });

                                                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                                        maxZoom: 19,
                                                        attribution: '© OpenStreetMap contributors'
                                                    }).addTo(map);
                                                } else {
                                                    map.setView([userLatitude, userLongitude], 13);
                                                }

                                                if (userMarker) map.removeLayer(userMarker);
                                                userMarker = L.marker([userLatitude, userLongitude])
                                                    .addTo(map)
                                                    .bindPopup('My Location')
                                                    .openPopup();

                                                if (donorMarker) map.removeLayer(donorMarker);
                                                donorMarker = L.marker([donorLatitude, donorLongitude])
                                                    .addTo(map)
                                                    .bindPopup('Donor Location')
                                                    .openPopup();

                                                calculateShortestPath(userLatitude, userLongitude, donorLatitude, donorLongitude);
                                            }, 200);
                                        } else {
                                            throw new Error(data.message || 'Donor location unavailable.');
                                        }
                                    })
                                    .catch(err => {
                                        loadingSpinner.style.display = 'none';
                                        alert('Error: ' + (err.message || 'Failed to load donor location.'));
                                        console.error('Error fetching donor location:', err);
                                    });
                            },
                            function (error) {
                                loadingSpinner.style.display = 'none';
                                alert('Failed to retrieve your current location. Please enable GPS.');
                                console.error('Geolocation error:', error);
                            }
                        );
                    } else {
                        loadingSpinner.style.display = 'none';
                        alert('Geolocation is not supported by your browser.');
                    }
                } else {
                    alert('No donor ID found. Cannot display location.');
                }
            }
        });

        function calculateShortestPath(userLat, userLng, donorLat, donorLng) {
            const graph = createGraph(userLat, userLng, donorLat, donorLng);

            const shortestPath = dijkstraAlgorithm(graph, [userLat, userLng], [donorLat, donorLng]);

            if (shortestPathPolyline) map.removeLayer(shortestPathPolyline);
            shortestPathPolyline = L.polyline(shortestPath, { color: 'green', weight: 5 }).addTo(map);
        }

        function createGraph(userLat, userLng, donorLat, donorLng) {
            return {
                nodes: [
                    { id: 'user', lat: userLat, lng: userLng },
                    { id: 'donor', lat: donorLat, lng: donorLng }
                ],
                edges: [
                    { from: 'user', to: 'donor', weight: haversineDistance(userLat, userLng, donorLat, donorLng) }
                ]
            };
        }

        function haversineDistance(lat1, lng1, lat2, lng2) {
            const R = 6371;
            const dLat = (lat2 - lat1) * (Math.PI / 180);
            const dLng = (lng2 - lng1) * (Math.PI / 180);
            const a =
                Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *
                Math.sin(dLng / 2) * Math.sin(dLng / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c;
        }

        function dijkstraAlgorithm(graph, start, end) {
            const path = [start, end];
            return path.map(coord => [coord[0], coord[1]]);
        }
    </script>
}
