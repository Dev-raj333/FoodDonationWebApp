@using X.PagedList;
@using X.PagedList.Mvc.Core;
@model IPagedList<DropRequest>
@{
    ViewData["Title"] = "Drop List";
    int serialNumber = 1 + ((Model.PageNumber - 1) * Model.PageSize);
}
<h2>Drop Requests</h2>

<table class="table">
    <thead>
        <tr>
            <th>SN</th>
            <th>Allocated Food</th>
            <th>Volunteer</th>
            <th>Pickup Time</th>
            <th>Status</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if(Model.Count != 0)
        {
            @foreach (var item in Model)
            {
                <tr>
                    <td>@serialNumber</td>
                    <td>@item.AllocatedFood.RequestedFoodType</td>
                    <td>@item.Volunteer.FirstName @item.Volunteer.LastName</td>
                    <td>@item.PickupTime</td>
                    <td>@item.PickupStatus</td>
                    <td>
                        <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-primary btn-sm">Details</a>
                        @if (User.IsInRole("Volunture"))
                        {
                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-primary btn-sm">Edit</a>
                        }
                    </td>
                </tr>
                serialNumber++; 
            }
        }else
        {
            <tr>
                <td colspan="6" class="text-center">No records found</td>
            </tr>
        }

    </tbody>
</table>

<div class="d-flex justify-content-end">
    @Html.PagedListPager(Model, page => Url.Action("Index", new { page, pageSize = Model.PageSize }), new PagedListRenderOptions
{
    DisplayLinkToFirstPage = PagedListDisplayMode.Always,
    DisplayLinkToLastPage = PagedListDisplayMode.Always,
    DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
    DisplayLinkToNextPage = PagedListDisplayMode.Always,
    DisplayLinkToIndividualPages = true,
    MaximumPageNumbersToDisplay = 10,
    LinkToFirstPageFormat = "«",
    LinkToPreviousPageFormat = "‹",
    LinkToNextPageFormat = "›",
    LinkToLastPageFormat = "»",
    ContainerDivClasses = new[] { "pagination-container" },
    UlElementClasses = new[] { "pagination" },
    LiElementClasses = new[] { "page-item" },
    PageClasses = new[] { "page-link" },
    ActiveLiElementClass = "active"
})
</div>
